import sys

OPERATORI = ['-', '^', '~', '=', '!']

# = este => implica
# ! este not
# ~ este or
# - este <=>
# ^ este and

#############
#TO DO: Let the user input the expression
expresie = '(P^((!Q)^(!(!(Q-(!R))))))'
MAX = 30
#############


tati = [0]
tati[0] = -1
fii = [0] * MAX
sol = [0] * MAX



EXPRESION_CORRECT = None
# ex: (((P~Q)=(!(P~Q)))^(P~(!(!Q)))) corect
# (P^((!Q)^(!(!(Q-(!R))))))
ind = 0

# daca nu inchid toate parantezele deschise
if expresie.count('(') != expresie.count(')'):
    print('Expresia este INCORECTA')
    sys.exit()
# daca am mai multe perechi de paranteze decat conectori logici
nr_conectori = 0
for i in OPERATORI:
    nr_conectori += expresie.count(i)

if ((expresie.count('(') + expresie.count(')')) // 2 != nr_conectori):
    print('Expresia este INCORECTA')
    sys.exit()


def sift(ind, tati):
    """
    sift(ind, tati) --> This functions takes us to the father of the current node in the solution tree
    So it moves the pointer upwards

    ind --> This variable is the pointer in the solution tree
    tati --> This variable is a list that remembers the fathers of each and every node

    The function returns the pointer to the father of the curretn node, or it may return -2
    which actually means that the program will terminate at some point
    """

    if ind >= 0:
        return tati[ind]
    else:
        # sau as putea sa omor programul direct
        EXPRESION_CORRECT = False
        return -2


def percolate(ind, fii):
    """
    percolate(ind, fii) --> This function takes us one free son of the current node.
    So it moves the pointer downwards
    If I try to do something not allowed the program will terminate

    ind --> This variable is the pointer in the solution tree
    fii --> This variable is a list that remembers the sons of each and every node

    The function returns the pointer to the free son of the current node.
    """

    try:
        if sol[fii[ind][0]] == 0:
            return fii[ind][0]
        else:
            return fii[ind][1]
    except:
        print('Expresia este INCORECTA')
        EXPRESION_CORRECT = False
        sys.exit()


def create_nodes2(tati, fii, ind):
    """
    create_nodes2(tati, fii, ind) --> This function creates two new nodes in the tree.

    tati --> This variable is a list that remembers the fathers of each and every node
    fii --> This variable is a list that remembers the sons of each and every node
    ind --> This variable is the pointer in the solution tree

    The function returns the new pointer that actually points to one of the newly created sons.
    """
    fii[ind] = list()
    tati.append(ind)
    fii[ind].append(len(tati) - 1)
    tati.append(ind)
    fii[ind].append(len(tati) - 1)
    ind = len(tati) - 2
    return ind


def create_nodes1(tati, fii, ind):
    """
    create_nodes1(tati, fii, ind) --> This function creates one new node in the tree.

    tati --> This variable is a list that remembers the fathers of each and every node
    fii --> This variable is a list that remembers the sons of each and every node
    ind --> This variable is the pointer in the solution tree

    The function returns the new pointer that actually points NOT to the newly created son, but
    to the same node as the input one, because I am looking for a negation: "not"
    """

    fii[ind] = list()
    tati.append(ind)
    fii[ind].append(len(tati) - 1)

    return ind


def interpret(start_config, tati, fii, sol, ind):
    """
    interpret() --> This function interprets the logical expression

    start_config --> Is a list that contains the values of the propositions
    tati --> Is the father - son relationship tree
    fii --> Is like tati but in reversed order ( from top to bottom )
    start_config --> Is a dictionary containing the truth values of the atomic propositions

    The function returns True or False, representing the interpretation of the expression
    """
    operator = sol[ind]
    val = None
    val2 = None
    if operator.isalpha():
        return start_config[operator]
    elif operator == '!':
        val = interpret(start_config, tati, fii, sol, fii[ind][0])
        if val == 0:
            return 1
        else:
            return 0
    else:
        if operator in OPERATORI:
            val = interpret(start_config, tati, fii, sol, fii[ind][0])
            val2 = interpret(start_config, tati, fii, sol, fii[ind][1])
            if operator == '^':
                return val * val2
            elif operator == '~':
                if val + val2 <= 1:
                    return val + val2
                else:
                    return 1
            elif operator == '-':
                if val == val2:
                    return 1
                else:
                    return 0
            elif operator == '=':
                if val == 0:
                    return 1
                else:
                    return 0


if expresie.count('(') == 0:
    # daca nu are paranteze deschise
    print('Expresia este INCORECTA')
    EXPRESION_CORRECT = False
    sys.exit()

for i, chr in enumerate(expresie):
    # for debugging
    print(i, tati, fii, ind, sol)
    # doar daca mai am unde sa merg in fata
    if i < len(expresie) - 1:
        next_chr = expresie[i + 1]
    else:
        next_chr = ''
    if chr == ')':
        ind = sift(ind, tati)
    elif chr == '(':
        # peeking over the next item
        if next_chr == '(':
            # daca vrea sa fie complexa am nevoie de doua noduri
            ind = create_nodes2(tati, fii, ind)
        elif next_chr == '!':
            # daca e negatie am nevoie doar de un nod
            ind = create_nodes1(tati, fii, ind)
        elif next_chr.isalpha():
            # daca e litera tot am nevoie de doua noduri, dar acum
            # pot sa si pun litera unde ii este locul
            ind = create_nodes2(tati, fii, ind)
            sol[ind] = next_chr
    elif chr.isalpha():
        # daca este litera o pun si merg in sus
        sol[ind] = chr
        ind = sift(ind, tati)
    elif chr in OPERATORI:
        # daca e operrator il pun si merg in jos
        sol[ind] = chr
        ind = percolate(ind, fii)
# daca am ajuns la tatal radacinii si nu am omorat programul in prealabil
# atunci e corecta
if ind == -1:
    print('Expresia este CORECTA')
    EXPRESION_CORRECT = True
else:
    print('Expresia este INCORECTA')
    EXPRESION_CORRECT = False

# just here to check the documentation
# print(sift.__doc__)

if EXPRESION_CORRECT == True:
    print('Do you want to interpret this expression? Y/N')
    answer = input()
    if answer == 'N':
        sys.exit()
    elif answer == 'Y':
        # TO DO: Let the user input the truth values for the atomic propositions.
        start_config = {
            'P': 1,
            'Q': 0,
            'R':1
        }
        print(interpret(start_config, tati, fii, sol, 0))
    else:
        print("Invalid input, terminating program")
        sys.exit()
